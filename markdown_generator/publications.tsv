pub_date	title	venue	excerpt	citation	url_slug	paper_url
2022-05-10	Muffin: Testing Deep Learning Libraries via Neural Architecture Fuzzing	ICSE 2022	"Deep learning (DL) techniques are shown to be effective in many challenging tasks, and are hence widely-adopted in practice. However, previous work has shown that DL libraries, the basis of building and executing DL models, contain bugs and can cause severe consequences. Unfortunately, existing approaches still cannot comprehensively excise DL libraries. They utilize existing trained models and only detect bugs in model inference phase. In this work we propose Muffin to address these issues. To this end, Muffin applies a specifically-designed model fuzzing approach, which allows it to generate tremendous diverse DL models to explore the target library, instead of relying only on existing trained models. Muffin makes differential testing feasible in the model training phase by tailoring a set of metrics to measure the inconsistency between different DL libraries. In this way, Muffin can best excise the library code to detect more bugs. To evaluate the effectiveness of Muffin, we conduct experiments on three widely-used DL libraries. The results demonstrate that Muffin can detect 39 new bugs in the latest release versions of these libraries."	"Gu, Jiazhen, et al. ""Muffin: Testing Deep Learning Libraries via Neural Architecture Fuzzing."" Proceedings of the 44th International Conference on Software Engineering. 2022."	Muffin	https://www.y-droid.com/papers/DNN_library_testing.pdf
2023-02-21	FUSEE: A Fully Memory-Disaggregated Key-Value Store	FAST 2023	"Distributed in-memory key-value (KV) stores are embracing the disaggregated memory (DM) architecture for higher resource utilization. However, existing KV stores on DM employ a semi-disaggregated design that stores KV pairs on DM but manages metadata with monolithic metadata servers, hence still suffering from low resource efficiency on metadata servers. To address this issue, this paper proposes FUSEE, a FUlly memory-diSaggrEgated KV StorE that brings disaggregation to metadata management. FUSEE replicates metadata, i.e., the index and memory management information, on memory nodes, manages them directly on the client side, and handles complex failures under the DM architecture. To scalably replicate the index on clients, FUSEE proposes a client-centric replication protocol that allows clients to concurrently access and modify the replicated index. To efficiently manage disaggregated memory, FUSEE adopts a two-level memory management scheme that splits the memory management duty among clients and memory nodes. Finally, to handle the metadata corruption under client failures, FUSEE leverages an embedded operation log scheme to repair metadata with low log maintenance overhead. We evaluate FUSEE with both micro and YCSB hybrid benchmarks. The experimental results show that FUSEE outperforms the state-of-the-art KV stores on DM by up to 4.5 times with less resource consumption."	"Shen, Jiacheng, et al. ""FUSEE: A Fully Memory-Disaggregated Key-Value Store."" 21st USENIX Conference on File and Storage Technologies (FAST 23). 2023."	FUSEE	https://www.usenix.org/system/files/fast23-shen.pdf
2023-07-11	SMART: A High-Performance Adaptive Radix Tree for Disaggregated Memory	OSDI 2023	"Disaggregated memory (DM) is an increasingly prevalent architecture in academia and industry with high resource utilization. It separates computing and memory resources into two pools and interconnects them with fast networks. Existing range indexes on DM are based on B+ trees, which suffer from large inherent read and write amplifications. The read and write amplifications rapidly saturate the network bandwidth, resulting in low request throughput and high access latency of B+ trees on DM.
In this paper, we propose to use the radix tree, which is more suitable for DM than the B+ tree due to smaller read and write amplifications. However, constructing a radix tree on DM is challenging due to the costly lock-based concurrency control, the bounded memory-side IOPS, and the complicated computing-side cache validation. To address these challenges, we design SMART, the first radix tree for disaggregated memory with high performance. Specifically, we leverage 1) a hybrid concurrency control scheme including lock-free internal nodes and fine-grained lock-based leaf nodes to reduce lock overhead, 2) a computing-side read-delegation and write-combining technique to break through the IOPS upper bound by reducing redundant I/Os, and 3) a simple yet effective reverse check mechanism for computing-side cache validation. Experimental results show that SMART achieves 6.1x higher throughput under typical write-intensive workloads and 2.8x higher throughput under read-only workloads, compared with state-of-the-art B+ trees on DM."	"Luo, Xuchuan, et al. ""SMART: A High-Performance Adaptive Radix Tree for Disaggregated Memory."" 17th USENIX Symposium on Operating Systems Design and Implementation (OSDI 23). 2023."	SMART	https://www.usenix.org/system/files/osdi23-luo.pdf
2023-10-23	Anole: An Elastic and Adaptive Memory-Disaggregated Caching System	SOSP 2023 (To appear)		"Shen, Jiacheng, et al. ""Anole: An Elastic and Adaptive Memory-Disaggregated Caching System"" 29th ACM Symposium on Operating Systems Princciples (SOSP). 2023."	Anole	
